type Board = Array(3,3) of Player & { Empty }
type Input = Position

initialBoard : Board
initialBoard ! (x, y) = Empty
initialBoard ! (1, 2) = A

goFirst : Player
goFirst = A

threeInARow : Board -> Bool
threeInARow(b) = or(inARow(3,A,b),inARow(3,B,b))

loop : (Board,Player) -> (Board,Player)
loop(b,p) = while not(gameOver(b,p)) do tryMove(b,p)

-- Game over function !
gameOver : (Board ,Player) -> Bool 
gameOver(b,p) = or(threeInARow(b),isFull(b))

isValid : (Board,Position) -> Bool
isValid(b,p) = if (b ! p) == Empty then True else False

outcome : (Board,Player) -> Player & {Tie}
outcome(b,p) = if inARow(3,A,b) then A else
               if inARow(3,B,b) then B else
               Tie

tryMove : (Board,Player) -> (Board,Player)
tryMove(b,p) = let pos = input in
                   if isValid(b,pos) then (place(p,b,pos),next(p))
                                     else (b,p)

play : (Board,Player) -> Player & { Tie }
play(a,b) = outcome(loop(a,b))

result : Player & { Tie }
result = play(initialBoard,goFirst)